head	1.14;
access;
symbols;
locks;
comment	@ * @;


1.14
date	2022.04.02.02.50.52;	author -;	state -;
branches;
next	1.13;

1.13
date	2022.01.27.00.10.48;	author -;	state -;
branches;
next	1.12;

1.12
date	2022.01.26.21.24.43;	author -;	state -;
branches;
next	1.11;

1.11
date	2021.12.20.20.55.34;	author -;	state -;
branches;
next	1.10;

1.10
date	2021.10.30.04.18.11;	author -;	state -;
branches;
next	1.9;

1.9
date	2021.09.26.19.41.17;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.10.22.21.37.26;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.07.09.21.05.44;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.06.27.21.44.57;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.04.07.20.36.11;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.01.15.00.16.52;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.01.14.22.45.21;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.01.14.00.21.53;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.01.13.21.34.03;	author -;	state -;
branches;
next	;


desc
@@


1.14
log
@-
@
text
@// $Id: file_sys.h,v 1.13 2022-01-26 16:10:48-08 - - $

#ifndef INODE_H
#define INODE_H

#include <exception>
#include <iostream>
#include <memory>
#include <map>
#include <vector>
using namespace std;

#include "util.h"

// inode_t -
//    An inode is either a directory or a plain file.

enum class file_type {PLAIN_TYPE, DIRECTORY_TYPE};
class inode;
class base_file;
class plain_file;
class directory;
using inode_ptr = shared_ptr<inode>;
using base_file_ptr = shared_ptr<base_file>;
using directory_entries = map<string,inode_ptr>;
using dirent_type = directory_entries::value_type;
ostream& operator<< (ostream&, file_type);


// inode_state -
//    A small convenient class to maintain the state of the simulated
//    process:  the root (/), the current directory (.), and the
//    prompt.

class inode_state {
   friend class inode;
   friend ostream& operator<< (ostream& out, const inode_state&);
   private:
      inode_ptr root {nullptr};
      inode_ptr cwd {nullptr};
      string prompt_ {"% "};
   public:
      inode_state (const inode_state&) = delete; // copy ctor
      inode_state& operator= (const inode_state&) = delete; // op=
      inode_state();
      const string& prompt() const;
      void prompt (const string&);
      const inode_ptr get_root() const { return root; }
};

// class inode -
// inode ctor -
//    Create a new inode of the given type.
// get_inode_nr -
//    Retrieves the serial number of the inode.  Inode numbers are
//    allocated in sequence by small integer.
// size -
//    Returns the size of an inode.  For a directory, this is the
//    number of dirents.  For a text file, the number of characters
//    when printed (the sum of the lengths of each word, plus the
//    number of words.
//    

class inode {
   friend class inode_state;
   private:
      static size_t next_inode_nr;
      size_t inode_nr;
      base_file_ptr contents;
   public:
      inode() = delete;
      inode (const inode&) = delete;
      inode& operator= (const inode&) = delete;
      inode (file_type);
      size_t get_inode_nr() const;
      directory_entries& get_dirents();
};


// class base_file -
// Just a base class at which an inode can point.  No data or
// functions.  Makes the synthesized members useable only from
// the derived classes.

class file_error: public runtime_error {
   public:
      explicit file_error (const string& what);
};

class base_file {
   friend class inode_state;
   friend class inode;
   protected:
      base_file() = default;
      virtual const string& file_type() const = 0;
   public:
      virtual ~base_file() = default;
      base_file (const base_file&) = delete;
      base_file& operator= (const base_file&) = delete;
      virtual size_t size() const = 0;
      virtual const wordvec& readfile() const;
      virtual void writefile (const wordvec& newdata);
      virtual void remove (const string& filename);
      virtual inode_ptr mkdir (const string& dirname);
      virtual inode_ptr mkfile (const string& filename);
      virtual directory_entries& get_dirents();
};

// class plain_file -
// Used to hold data.
// synthesized default ctor -
//    Default vector<string> is a an empty vector.
// readfile -
//    Returns a copy of the contents of the wordvec in the file.
// writefile -
//    Replaces the contents of a file with new contents.

class plain_file: public base_file {
   private:
      wordvec data;
      virtual const string& file_type() const override {
         static const string result = "plain file";
         return result;
      }
   public:
      virtual size_t size() const override;
      virtual const wordvec& readfile() const override;
      virtual void writefile (const wordvec& newdata) override;
};

// class directory -
// Used to map filenames onto inode pointers.
// default ctor -
//    Creates a new map with keys "." and "..".
// remove -
//    Removes the file or subdirectory from the current inode.
//    Throws a file_error if the file does not exist, 
//    or the subdirectory is not empty.
//    Here empty means the only entries are dot (.) and dotdot (..).
// mkdir -
//    Creates a new directory under the current directory and 
//    immediately adds the directories dot (.) and dotdot (..) to it.
//    Note that the parent (..) of / is / itself.  It is an error
//    if the entry already exists.
// mkfile -
//    Create a new empty text file with the given name.  Error if
//    a dirent with that name exists.

class directory: public base_file {
   private:
      // Must be a map, not unordered_map, so printing is lexicographic
      directory_entries dirents;
      virtual const string& file_type() const override {
         static const string result = "directory";
         return result;
      }
   public:
      virtual size_t size() const override;
      virtual void remove (const string& filename) override;
      virtual inode_ptr mkdir (const string& dirname) override;
      virtual inode_ptr mkfile (const string& filename) override;
      virtual directory_entries& get_dirents() override;
};

#endif

@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.13 2022-01-26 15:49:55-08 - - $
d137 2
a138 2
//    Throws an file_error if this is not a directory, the file
//    does not exist, or the subdirectory is not empty.
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.11 2021-12-20 12:55:34-08 - - $
d26 1
d48 1
d91 2
d95 1
a95 1
      virtual const string& error_file_type() const = 0;
d121 1
a121 1
      virtual const string& error_file_type() const override {
d153 1
a153 1
      virtual const string& error_file_type() const override {
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.10 2021-10-29 21:18:11-07 - - $
d25 1
d74 1
d102 1
d148 1
a148 1
      map<string,inode_ptr> dirents;
d158 1
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.9 2021-09-26 12:41:17-07 - - $
d3 2
a4 2
#ifndef __INODE_H__
#define __INODE_H__
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.8 2020-10-22 14:37:26-07 - - $
d69 2
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.7 2019-07-09 14:05:44-07 - - $
d68 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.6 2018-06-27 14:44:57-07 - - $
d45 1
d64 2
a65 2
      static int next_inode_nr;
      int inode_nr;
d69 1
a69 1
      int get_inode_nr() const;
d86 1
a86 1
      virtual const string error_file_type() const = 0;
d111 3
a113 2
      virtual const string error_file_type() const override {
         return "plain file";
d143 3
a145 2
      virtual const string error_file_type() const override {
         return "directory";
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.5 2016-04-07 13:36:11-07 - - $
d85 1
d91 5
a95 5
      virtual const wordvec& readfile() const = 0;
      virtual void writefile (const wordvec& newdata) = 0;
      virtual void remove (const string& filename) = 0;
      virtual inode_ptr mkdir (const string& dirname) = 0;
      virtual inode_ptr mkfile (const string& filename) = 0;
d110 3
a116 3
      virtual void remove (const string& filename) override;
      virtual inode_ptr mkdir (const string& dirname) override;
      virtual inode_ptr mkfile (const string& filename) override;
d141 3
a145 2
      virtual const wordvec& readfile() const override;
      virtual void writefile (const wordvec& newdata) override;
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.4 2016-01-14 16:16:52-08 - - $
d44 1
a44 1
      const string& prompt();
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.3 2016-01-14 14:45:21-08 - - $
a36 2
      inode_state (const inode_state&) = delete; // copy ctor
      inode_state& operator= (const inode_state&) = delete; // op=
d41 2
d85 2
a87 1
      base_file (base_file&&) = delete;
a88 3
      base_file& operator= (base_file&&) = delete;
   public:
      virtual ~base_file() = default;
a95 1

@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.2 2016-01-13 16:21:53-08 - - $
a14 1
//
a16 1
//
d27 1
a27 1
//
a31 1
//
a46 2

//
a47 1
//
d71 1
a71 1
//
a72 1
//
a75 1
//
a99 1
//
a100 1
//
a107 1
//
a120 1
//
a121 1
//
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.h,v 1.1 2016-01-13 13:34:03-08 - - $
d44 1
a44 1
      string prompt {"% "};
d47 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: inode.h,v 1.13 2014-06-12 18:10:25-07 - - $
d20 1
a20 1
enum inode_t {PLAIN_INODE, DIR_INODE};
d22 1
a22 1
class file_base;
d26 2
a27 3
using file_base_ptr = shared_ptr<file_base>;
using plain_file_ptr = shared_ptr<plain_file>;
using directory_ptr = shared_ptr<directory>;
d70 1
a70 2
      inode_t type;
      file_base_ptr contents;
d72 1
a72 1
      inode (inode_t init_type);
d77 1
a77 1
// class file_base -
d84 6
a89 1
class file_base {
d91 7
a97 6
      file_base () = default;
      file_base (const file_base&) = default;
      file_base (file_base&&) = default;
      file_base& operator= (const file_base&) = default;
      file_base& operator= (file_base&&) = default;
      virtual ~file_base () = default;
d99 5
a103 3
   public:
      friend plain_file_ptr plain_file_ptr_of (file_base_ptr);
      friend directory_ptr directory_ptr_of (file_base_ptr);
a114 1
//    Throws an yshell_exn for a directory.
a116 1
//    Throws an yshell_exn for a directory.
d119 1
a119 1
class plain_file: public file_base {
d123 6
a128 3
      size_t size() const override;
      const wordvec& readfile() const;
      void writefile (const wordvec& newdata);
d139 1
a139 1
//    Throws an yshell_exn if this is not a directory, the file
d151 1
a151 1
class directory: public file_base {
d153 1
d156 6
a161 4
      size_t size() const override;
      void remove (const string& filename);
      inode& mkdir (const string& dirname);
      inode& mkfile (const string& filename);
@
